/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//               Copyright (C) 2011-2017 - The DESY CMS Group                  //
//                           All rights reserved                               //
//                                                                             //
//      The CMStkModLab source code is licensed under the GNU GPL v3.0.        //
//      You have the right to modify and/or redistribute this source code      //
//      under the terms specified in the license, which may be found online    //
//      at http://www.gnu.org/licenses or at License.txt.                      //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

#include "ApplicationConfigReader.h"
#include "ApplicationConfigWriter.h"

#include "ApplicationConfig.h"

const std::string Config::CMSTkModLabBasePath("@basepath@");

ApplicationConfig* ApplicationConfig::instance_ = NULL;

ApplicationConfig::ApplicationConfig(const std::string filename)
{
  ApplicationConfigReader reader(filename);
  reader.fill(keyvalueMap_);
}

ApplicationConfig* ApplicationConfig::instance(const std::string filename)
{
  if (instance_==NULL) {
    if (!filename.empty()) {
      instance_ = new ApplicationConfig(filename);
    }
  }
  return instance_;
}

void ApplicationConfig::safe(const std::string filename)
{
  ApplicationConfigWriter writer(filename);
  writer.write(keyvalueMap_);
}

void ApplicationConfig::issueKeyError(std::string const& key) const
{
  std::cerr << " [issueKeyError::getValue] ** ERROR: failed to get value for key: "
      << key << "." << std::endl;

  QMessageBox::critical(0,
                        QString("[ApplicationConfigReader::issueKeyError]"),
                        QString("Failed to find value for key: \"%1\"\n.").arg( QString( key.c_str() ) ),
                        QMessageBox::Ok);
}

template <> std::string ApplicationConfig::getValue(std::string const& key) const
{
  std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
  if (it!=keyvalueMap_.end()) {
    return it->second;
  } else {
    issueKeyError(key);
  }
  return std::string();
}

template <> std::vector<std::string> ApplicationConfig::getValueVector(std::string const& key) const
{
  std::vector<std::string> returnVector;
  std::pair<std::multimap<std::string,std::string>::const_iterator,
            std::multimap<std::string,std::string>::const_iterator> ret;
  ret = keyvalueMap_.equal_range(key);
  for (std::multimap<std::string,std::string>::const_iterator it=ret.first; it!=ret.second; ++it) {
    returnVector.push_back(it->second);
  }
  return returnVector;
}

template <> std::string ApplicationConfig::getValue(std::string const& key,
                                                    std::string defaultValue) const
{
  std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
  if (it!=keyvalueMap_.end()) {
    return it->second;
  } else {
    return defaultValue;
  }
  return std::string();
}

template <> int ApplicationConfig::getValue(std::string const& key) const
{
  int returnValue = 0;
  std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
  if (it!=keyvalueMap_.end()) {
    std::istringstream iss(it->second.c_str(), std::istringstream::in);
    iss >> std::setbase(0) >> returnValue;
  } else {
    issueKeyError(key);
  }
  return returnValue;
}

template <> std::vector<int> ApplicationConfig::getValueVector(std::string const& key) const
{
  int returnValue = 0;
  std::vector<int> returnVector;
  std::pair<std::multimap<std::string,std::string>::const_iterator,
            std::multimap<std::string,std::string>::const_iterator> ret;
  ret = keyvalueMap_.equal_range(key);
  for (std::multimap<std::string,std::string>::const_iterator it=ret.first; it!=ret.second; ++it) {
    std::istringstream iss(it->second.c_str(), std::istringstream::in);
    iss >> std::setbase(0) >> returnValue;
    returnVector.push_back(returnValue);
  }
  return returnVector;
}

template <> int ApplicationConfig::getValue(std::string const& key,
                                            int defaultValue) const
{
  int returnValue = 0;
  std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
  if (it!=keyvalueMap_.end()) {
    std::istringstream iss(it->second.c_str(), std::istringstream::in);
    iss >> std::setbase(0) >> returnValue;
  } else {
    returnValue = defaultValue;
  }
  return returnValue;
}

template <> unsigned int ApplicationConfig::getValue(std::string const& key) const
{
  unsigned int returnValue = 0;
  std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
  if (it!=keyvalueMap_.end()) {
    std::istringstream iss(it->second.c_str(), std::istringstream::in);
    iss >> std::setbase(0) >> returnValue;
  } else {
    issueKeyError(key);
  }
  return returnValue;
}

template <> std::vector<unsigned int> ApplicationConfig::getValueVector(std::string const& key) const
{
  unsigned int returnValue = 0;
  std::vector<unsigned int> returnVector;
  std::pair<std::multimap<std::string,std::string>::const_iterator,
            std::multimap<std::string,std::string>::const_iterator> ret;
  ret = keyvalueMap_.equal_range(key);
  for (std::multimap<std::string,std::string>::const_iterator it=ret.first; it!=ret.second; ++it) {
    std::istringstream iss(it->second.c_str(), std::istringstream::in);
    iss >> std::setbase(0) >> returnValue;
    returnVector.push_back(returnValue);
  }
  return returnVector;
}

template <> unsigned int ApplicationConfig::getValue(std::string const& key,
                                                     unsigned int defaultValue) const
{
  unsigned int returnValue = 0;
  std::multimap<std::string,std::string>::const_iterator it = keyvalueMap_.find(key);
  if (it!=keyvalueMap_.end()) {
    std::istringstream iss(it->second.c_str(), std::istringstream::in);
    iss >> std::setbase(0) >> returnValue;
  } else {
    returnValue = defaultValue;
  }
  return returnValue;
}

template <> void ApplicationConfig::setValue(std::string const& key, std::string value)
{
  keyvalueMap_.erase(key);
  keyvalueMap_.insert(std::make_pair(key, value));
}
