#!/bin/sh

echo 
echo "  CMSTkModLab configuration script."
echo

BASEPATH=$PWD
ARCHITECTURE=`uname`
KERNELMAJOR=`uname -r | cut -d . -f 1`
KERNELMINOR=`uname -r | cut -d . -f 2`

NODEFO=0
NOTHERMAL=0
NOTHERMAL2=0
NOASSEMBLY=0
NOPLASMA=0
NOPUMPSTATION=0
NOMARTA=0
USEFAKEDEVICES=0
NOUEYE=0
CONFIGDEFINES=""
WEBDOCUMENTROOT="/var/www/html"

ROOTCFLAGS=`root-config --cflags`
ROOTLIBS=`root-config --libs`
ROOTGLIBS=`root-config --glibs`
ROOTMAJOR=`root-config --version | cut -d . -f 1`

echo "#!/bin/sh" > reconfigure
COMMANDLINE="./configure "
for var in "$@"
do
    COMMANDLINE="$COMMANDLINE $var"
done
echo $COMMANDLINE >> reconfigure
chmod a+x reconfigure

while test $# -gt 0; do 
  case $1 in
    --nodefo)
      NODEFO=1
      ;;
    --nothermal)
      NOTHERMAL=1
      ;;
    --nothermal2)
      NOTHERMAL2=1
      ;;
    --noassembly)
      NOASSEMBLY=1
      ;;
    --noplasma)
      NOPLASMA=1
      ;;
    --nopumpstation)
      NOPUMPSTATION=1
      ;;
    --nomarta)
      NOMARTA=1
      ;;
    --noueye)
      NOUEYE=1
      CONFIGDEFINES="$CONFIGDEFINES NOUEYE"
      ;;
    --fake)
      USEFAKEDEVICES=1
      NOUEYE=1
      CONFIGDEFINES="$CONFIGDEFINES USE_FAKEIO NOUEYE"
      ;;
  *)
    # Call standard parser
    ;;
  esac

  shift
done

QMAKE="qmake"

if test $ARCHITECTURE = "Darwin"; then
    CONFIGDEFINES="$CONFIGDEFINES DARWIN"
    SOFLAGS="-m64 -O2 -dynamiclib -single_module -undefined dynamic_lookup"
    CC="clang"
    CXX="clang++"
    LD="clang++"
    QWTDEFINES=""
    QWTINCLUDES="/usr/local/lib/qwt.framework/Headers"
    QWTLIBS="-F/usr/local/lib -framework qwt"
    QMAKE="~/Qt/5.14.0/clang_64/bin/qmake"
fi
if test $ARCHITECTURE = "Linux" && test $KERNELMAJOR -lt 2 && test $KERNELMINOR -lt 6; then
    echo "Linux kernel minor version < 6: fake device support forced"
    USEFAKEDEVICES=1
    CONFIGDEFINES="USE_FAKEIO NOUEYE"
fi
if test $ARCHITECTURE = "Linux"; then
    SOFLAGS="-shared"
    # Support multiple distros (e.g. Ubuntu (Debian), openSUSE)
    if [ -n "`which qmake 2> /dev/null`" ]; then
        echo Using qmake.
        QMAKE="qmake"
    fi
    if [ -n "`which qmake-qt4 2> /dev/null`" ]; then
        echo Using qmake-qt4
         QMAKE="qmake-qt4"
    fi
    CC="gcc"
    CXX="g++"
    LD="g++"
    # Support multiple distros (e.g. Ubuntu (Debian), openSUSE)
    if [ -n "`locate qwtplot3d-qt4.so`" ]; then
        echo Using Qwt libraries with qt4 suffix.
        QWTP3DDEFINES="QWT_QT4"
        QWTP3DINCLUDES="/usr/include/qwtplot3d-qt4"
        QWTP3DLIBS="-lqwtplot3d-qt4"
    else
        echo Using Qwt libraries without qt4 suffix.
        QWTP3DDEFINES=""
        QWTP3DINCLUDES="/usr/include/qwtplot3d"
        QWTP3DLIBS="-lqwtplot3d"
    fi
    QWTINCLUDES="/usr/include/qwt $QWTINCLUDES"
    QWTLIBS="-lqwt $QWTLIBS -lGL -lGLU"
fi

if test $USEFAKEDEVICES = 1; then
    echo build with fake device support
else
    echo build with real device support
fi
if test $NOUEYE = 1; then
    echo build without uEye support
else
    echo build with uEye support
fi
if test $NODEFO = 1; then
    echo build without DEFO support
else
    echo build with DEFO support
fi
if test $NOTHERMAL = 1; then
    echo build without THERMAL support
else
    echo build with THERMAL support
fi
if test $NOTHERMAL2 = 1; then
    echo build without THERMAL2 support
else
    echo build with THERMAL2 support
fi
if test $NOASSEMBLY = 1; then
    echo build without ASSEMBLY support
else
    echo build with ASSEMBLY support
fi
if test $NOPLASMA = 1; then
    echo build without Plasma Cleaner support
else
    echo build with Plasma Cleaner support
fi
if test $NOPUMPSTATION = 1; then
    echo build without Pump Station support
else
    echo build with Pump Station support
fi
if test $NOMARTA = 1; then
    echo build without Marta support
else
    echo build with Marta support
fi

SED_VARIABLES="BASEPATH ARCHITECTURE KERNELMAJOR KERNELMINOR QMAKE CXX CC LD NODEFO NOTHERMAL NOTHERMAL2 NOASSEMBLY NOPLASMA NOPUMPSTATION NOMARTA APPLICATIONVERSIONSTR USEFAKEDEVICES NOUEYE WEBDOCUMENTROOT SOFLAGS CONFIGDEFINES QWTINCLUDES QWTLIBS QWTP3DDEFINES QWTP3DINCLUDES QWTP3DLIBS ROOTCFLAGS ROOTLIBS ROOTGLIBS ROOTMAJOR"

echo "#!/bin/sh
dest=\`basename \$1 .in\`
sed \\" > config.status

for key in $SED_VARIABLES; do
  eval key_value='"$'${key}'"'
  key_lower=`echo $key | awk '{print tolower($1)}'`
  echo "   -e 's?@$key_lower@?$key_value?g' \\" >> config.status
done
echo "   < \$1 > \$dest" >> config.status
chmod +x config.status

echo ""
echo -n 'running config.status ..... '
served_dirs=
ROOTDIR=`pwd`
for a in `find . -name '*.in' -print`; do
  if test `basename $a` = "Makefile.in"; then
    served_dirs="$served_dirs `dirname $a` "
  fi
  cd `dirname $a`
  $ROOTDIR/config.status `basename $a`
  cd $ROOTDIR
done
echo done.
